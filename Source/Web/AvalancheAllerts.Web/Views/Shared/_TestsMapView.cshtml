<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
<script src="https://api.mapbox.com/mapbox.js/v2.2.3/mapbox.js"></script>
@*<link href="https://api.mapbox.com/mapbox.js/v2.2.3/mapbox.css" rel="stylesheet" />*@
<script src="~/Scripts/lib/leaflet-search.js"></script>
<link rel="stylesheet" href="http://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.css"/>
<script src="https://maps.googleapis.com/maps/api/js?v=3&sensor=false"></script>
<div>
    <div id="map"></div>
</div>

<script>
    function buildMap(elementId) {
        L.mapbox.accessToken = 'pk.eyJ1IjoiZGFueTkwdG0iLCJhIjoiY2lpMGE3eW8xMDBjYXcxa3N1NjdvdHd3NiJ9.h83bG5gr14GXwhGrODE-Mw';
        var map = L.mapbox.map(elementId, 'mapbox.streets');
        //var map = new L.Map('map', { zoom: 9, center: new L.latLng([41.575730, 13.002411]) });
        //map.addLayer(new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'));	//base layer

        return map;
    }

    function initMapSearch(map) {
        var controlSearch = new L.Control.Search({
            url: 'http://nominatim.openstreetmap.org/search?format=json&q={s}',
            jsonpParam: 'json_callback',
            propertyName: 'display_name',
            propertyLoc: ['lat', 'lon'],
            circleLocation: false,
            markerLocation: true,
            autoType: true,
            autoCollapse: true,
            minLength: 3,
            zoom: 10
        });

        map.addControl(controlSearch);

        return controlSearch;
    }
    function printMap(map, tests) {
        /*L.mapbox.accessToken = 'pk.eyJ1IjoiZGFueTkwdG0iLCJhIjoiY2lpMGE3eW8xMDBjYXcxa3N1NjdvdHd3NiJ9.h83bG5gr14GXwhGrODE-Mw';
        var map = L.mapbox.map('map', 'mapbox.streets');*/


        //position
        map.locate({
            setView: false,
            maxZoom: 16
        });

        var dangerLevel1Icon = L.icon({
            iconUrl: 'Contrent/images/1.png',
            //shadowUrl: 'leaf-shadow.png',

            iconSize: [98, 70], // size of the icon
            //shadowSize: [50, 64], // size of the shadow
            iconAnchor: [22, 94], // point of the icon which will correspond to marker's location
            //shadowAnchor: [4, 62],  // the same for the shadow
            popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
        });

        var LeafIcon = L.Icon.extend({
            options: {
                //shadowUrl: 'leaf-shadow.png',
                iconSize: [98, 70],
                //shadowSize: [50, 64],
                iconAnchor: [22, 84],
                //shadowAnchor: [4, 62],
                popupAnchor: [-3, -76]
            }
        });

        var dangerLevelIcons = [
            new LeafIcon({ iconUrl: 'Content/images/1.png' }),
            new LeafIcon({ iconUrl: 'Content/images/2.png' }),
            new LeafIcon({ iconUrl: 'Content/images/3.png' }),
            new LeafIcon({ iconUrl: 'Content/images/4.png' }),
            new LeafIcon({ iconUrl: 'Content/images/5.png' })
        ];

        L.icon = function(options) {
            return new L.Icon(options);
        };

        var group = [];
        for (var i in tests) {
            group[i] = L.marker([tests[i].Position.Latitude, tests[i].Position.Longitude], { icon: dangerLevelIcons[tests[i].DangerLevel - 1] }).addTo(map).bindPopup(tests[i].Place);
        }

        group = new L.featureGroup(group);

        map.fitBounds(group.getBounds());
    }
</script>